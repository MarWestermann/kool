/*
 * NOTE - this file is autogenerated - do not edit!!!
 */

package io.kool.template.html

import org.w3c.dom.*

import kotlin.dom.*


/** Creates a new <a href="http://dev.w3.org/html5/spec/the-a-element.html#the-a-element" title="Hyperlink">a</a> element: Hyperlink */
fun Node.a(text: String? = null, href: String? = null, target: String? = null, rel: String? = null, media: String? = null, hreflang: String? = null, typeName: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("a", text, init)
    if (href != null) answer.setAttribute("href", href)
    if (target != null) answer.setAttribute("target", target)
    if (rel != null) answer.setAttribute("rel", rel)
    if (media != null) answer.setAttribute("media", media)
    if (hreflang != null) answer.setAttribute("hreflang", hreflang)
    if (typeName != null) answer.setAttribute("type", typeName)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-a-element.html#the-a-element" title="Hyperlink">a</a> element: Hyperlink */
fun Node.a(text: String? = null, href: String? = null, target: String? = null, rel: String? = null, media: String? = null, hreflang: String? = null, typeName: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = a(text, href, target, rel, media, hreflang, typeName, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-abbr-element.html#the-abbr-element" title="Abbreviation">abbr</a> element: Abbreviation */
fun Node.abbr(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("abbr", text, init)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-abbr-element.html#the-abbr-element" title="Abbreviation">abbr</a> element: Abbreviation */
fun Node.abbr(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = abbr(text, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-address-element.html#the-address-element" title="Contact information for a page or article element">address</a> element: Contact information for a page or <code><a href="the-article-element.html#the-article-element">article</a></code> element */
fun Node.address(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("address", text, init)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-address-element.html#the-address-element" title="Contact information for a page or article element">address</a> element: Contact information for a page or <code><a href="the-article-element.html#the-article-element">article</a></code> element */
fun Node.address(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = address(text, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-area-element.html#the-area-element" title="Hyperlink or dead area on an image map">area</a> element: Hyperlink or dead area on an image map */
fun Node.area(alt: String? = null, coords: String? = null, shape: String? = null, href: String? = null, target: String? = null, rel: String? = null, media: String? = null, hreflang: String? = null, typeName: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = element("area", init)
    if (alt != null) answer.setAttribute("alt", alt)
    if (coords != null) answer.setAttribute("coords", coords)
    if (shape != null) answer.setAttribute("shape", shape)
    if (href != null) answer.setAttribute("href", href)
    if (target != null) answer.setAttribute("target", target)
    if (rel != null) answer.setAttribute("rel", rel)
    if (media != null) answer.setAttribute("media", media)
    if (hreflang != null) answer.setAttribute("hreflang", hreflang)
    if (typeName != null) answer.setAttribute("type", typeName)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-area-element.html#the-area-element" title="Hyperlink or dead area on an image map">area</a> element: Hyperlink or dead area on an image map */
fun Node.area(alt: String? = null, coords: String? = null, shape: String? = null, href: String? = null, target: String? = null, rel: String? = null, media: String? = null, hreflang: String? = null, typeName: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = area(alt, coords, shape, href, target, rel, media, hreflang, typeName, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-article-element.html#the-article-element" title="Self-contained syndicatable or reusable composition">article</a> element: Self-contained syndicatable or reusable composition */
fun Node.article(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("article", text, init)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-article-element.html#the-article-element" title="Self-contained syndicatable or reusable composition">article</a> element: Self-contained syndicatable or reusable composition */
fun Node.article(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = article(text, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-aside-element.html#the-aside-element" title="Sidebar for tangentially related content">aside</a> element: Sidebar for tangentially related content */
fun Node.aside(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("aside", text, init)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-aside-element.html#the-aside-element" title="Sidebar for tangentially related content">aside</a> element: Sidebar for tangentially related content */
fun Node.aside(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = aside(text, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-audio-element.html#the-audio-element" title="Audio player">audio</a> element: Audio player */
fun Node.audio(text: String? = null, src: String? = null, crossorigin: String? = null, preload: String? = null, autoplay: String? = null, mediagroup: String? = null, loop: String? = null, muted: String? = null, controls: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("audio", text, init)
    if (src != null) answer.setAttribute("src", src)
    if (crossorigin != null) answer.setAttribute("crossorigin", crossorigin)
    if (preload != null) answer.setAttribute("preload", preload)
    if (autoplay != null) answer.setAttribute("autoplay", autoplay)
    if (mediagroup != null) answer.setAttribute("mediagroup", mediagroup)
    if (loop != null) answer.setAttribute("loop", loop)
    if (muted != null) answer.setAttribute("muted", muted)
    if (controls != null) answer.setAttribute("controls", controls)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-audio-element.html#the-audio-element" title="Audio player">audio</a> element: Audio player */
fun Node.audio(text: String? = null, src: String? = null, crossorigin: String? = null, preload: String? = null, autoplay: String? = null, mediagroup: String? = null, loop: String? = null, muted: String? = null, controls: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = audio(text, src, crossorigin, preload, autoplay, mediagroup, loop, muted, controls, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-b-element.html#the-b-element" title="Keywords">b</a> element: Keywords */
fun Node.b(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("b", text, init)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-b-element.html#the-b-element" title="Keywords">b</a> element: Keywords */
fun Node.b(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = b(text, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-base-element.html#the-base-element" title="Base URL and default target browsing context for hyperlinks and forms">base</a> element: Base URL and default target <a href="browsers.html#browsing-context">browsing context</a> for <a href="links.html#attr-hyperlink-target" title="attr-hyperlink-target">hyperlinks</a> and <a href="attributes-common-to-form-controls.html#attr-fs-target" title="attr-fs-target">forms</a> */
fun Node.base(href: String? = null, target: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = element("base", init)
    if (href != null) answer.setAttribute("href", href)
    if (target != null) answer.setAttribute("target", target)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-base-element.html#the-base-element" title="Base URL and default target browsing context for hyperlinks and forms">base</a> element: Base URL and default target <a href="browsers.html#browsing-context">browsing context</a> for <a href="links.html#attr-hyperlink-target" title="attr-hyperlink-target">hyperlinks</a> and <a href="attributes-common-to-form-controls.html#attr-fs-target" title="attr-fs-target">forms</a> */
fun Node.base(href: String? = null, target: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = base(href, target, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-bdi-element.html#the-bdi-element" title="Text directionality isolation">bdi</a> element: Text directionality isolation */
fun Node.bdi(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("bdi", text, init)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-bdi-element.html#the-bdi-element" title="Text directionality isolation">bdi</a> element: Text directionality isolation */
fun Node.bdi(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = bdi(text, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-bdo-element.html#the-bdo-element" title="Text directionality formatting">bdo</a> element: Text directionality formatting */
fun Node.bdo(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("bdo", text, init)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-bdo-element.html#the-bdo-element" title="Text directionality formatting">bdo</a> element: Text directionality formatting */
fun Node.bdo(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = bdo(text, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-blockquote-element.html#the-blockquote-element" title="A section quoted from another source">blockquote</a> element: A section quoted from another source */
fun Node.blockquote(text: String? = null, cite: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("blockquote", text, init)
    if (cite != null) answer.setAttribute("cite", cite)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-blockquote-element.html#the-blockquote-element" title="A section quoted from another source">blockquote</a> element: A section quoted from another source */
fun Node.blockquote(text: String? = null, cite: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = blockquote(text, cite, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-body-element.html#the-body-element" title="Document body">body</a> element: Document body */
fun Node.body(text: String? = null, onafterprint: String? = null, onbeforeprint: String? = null, onbeforeunload: String? = null, onblur: String? = null, onerror: String? = null, onfocus: String? = null, onhashchange: String? = null, onload: String? = null, onmessage: String? = null, onoffline: String? = null, ononline: String? = null, onpagehide: String? = null, onpageshow: String? = null, onpopstate: String? = null, onresize: String? = null, onscroll: String? = null, onstorage: String? = null, onunload: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("body", text, init)
    if (onafterprint != null) answer.setAttribute("onafterprint", onafterprint)
    if (onbeforeprint != null) answer.setAttribute("onbeforeprint", onbeforeprint)
    if (onbeforeunload != null) answer.setAttribute("onbeforeunload", onbeforeunload)
    if (onblur != null) answer.setAttribute("onblur", onblur)
    if (onerror != null) answer.setAttribute("onerror", onerror)
    if (onfocus != null) answer.setAttribute("onfocus", onfocus)
    if (onhashchange != null) answer.setAttribute("onhashchange", onhashchange)
    if (onload != null) answer.setAttribute("onload", onload)
    if (onmessage != null) answer.setAttribute("onmessage", onmessage)
    if (onoffline != null) answer.setAttribute("onoffline", onoffline)
    if (ononline != null) answer.setAttribute("ononline", ononline)
    if (onpagehide != null) answer.setAttribute("onpagehide", onpagehide)
    if (onpageshow != null) answer.setAttribute("onpageshow", onpageshow)
    if (onpopstate != null) answer.setAttribute("onpopstate", onpopstate)
    if (onresize != null) answer.setAttribute("onresize", onresize)
    if (onscroll != null) answer.setAttribute("onscroll", onscroll)
    if (onstorage != null) answer.setAttribute("onstorage", onstorage)
    if (onunload != null) answer.setAttribute("onunload", onunload)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-body-element.html#the-body-element" title="Document body">body</a> element: Document body */
fun Node.body(text: String? = null, onafterprint: String? = null, onbeforeprint: String? = null, onbeforeunload: String? = null, onblur: String? = null, onerror: String? = null, onfocus: String? = null, onhashchange: String? = null, onload: String? = null, onmessage: String? = null, onoffline: String? = null, ononline: String? = null, onpagehide: String? = null, onpageshow: String? = null, onpopstate: String? = null, onresize: String? = null, onscroll: String? = null, onstorage: String? = null, onunload: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = body(text, onafterprint, onbeforeprint, onbeforeunload, onblur, onerror, onfocus, onhashchange, onload, onmessage, onoffline, ononline, onpagehide, onpageshow, onpopstate, onresize, onscroll, onstorage, onunload, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-br-element.html#the-br-element" title="Line break, e.g. in poem or postal address">br</a> element: Line break, e.g. in poem or postal address */
fun Node.br(accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = element("br", init)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-br-element.html#the-br-element" title="Line break, e.g. in poem or postal address">br</a> element: Line break, e.g. in poem or postal address */
fun Node.br(accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = br(accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-button-element.html#the-button-element" title="Button control">button</a> element: Button control */
fun Node.button(text: String? = null, autofocus: String? = null, disabled: String? = null, form: String? = null, formaction: String? = null, formenctype: String? = null, formmethod: String? = null, formnovalidate: String? = null, formtarget: String? = null, name: String? = null, typeName: String? = null, value: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("button", text, init)
    if (autofocus != null) answer.setAttribute("autofocus", autofocus)
    if (disabled != null) answer.setAttribute("disabled", disabled)
    if (form != null) answer.setAttribute("form", form)
    if (formaction != null) answer.setAttribute("formaction", formaction)
    if (formenctype != null) answer.setAttribute("formenctype", formenctype)
    if (formmethod != null) answer.setAttribute("formmethod", formmethod)
    if (formnovalidate != null) answer.setAttribute("formnovalidate", formnovalidate)
    if (formtarget != null) answer.setAttribute("formtarget", formtarget)
    if (name != null) answer.setAttribute("name", name)
    if (typeName != null) answer.setAttribute("type", typeName)
    if (value != null) answer.setAttribute("value", value)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-button-element.html#the-button-element" title="Button control">button</a> element: Button control */
fun Node.button(text: String? = null, autofocus: String? = null, disabled: String? = null, form: String? = null, formaction: String? = null, formenctype: String? = null, formmethod: String? = null, formnovalidate: String? = null, formtarget: String? = null, name: String? = null, typeName: String? = null, value: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = button(text, autofocus, disabled, form, formaction, formenctype, formmethod, formnovalidate, formtarget, name, typeName, value, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-canvas-element.html#the-canvas-element" title="Scriptable bitmap canvas">canvas</a> element: Scriptable bitmap canvas */
fun Node.canvas(text: String? = null, width: String? = null, height: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("canvas", text, init)
    if (width != null) answer.setAttribute("width", width)
    if (height != null) answer.setAttribute("height", height)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-canvas-element.html#the-canvas-element" title="Scriptable bitmap canvas">canvas</a> element: Scriptable bitmap canvas */
fun Node.canvas(text: String? = null, width: String? = null, height: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = canvas(text, width, height, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-caption-element.html#the-caption-element" title="Table caption">caption</a> element: Table caption */
fun Node.caption(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("caption", text, init)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-caption-element.html#the-caption-element" title="Table caption">caption</a> element: Table caption */
fun Node.caption(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = caption(text, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-cite-element.html#the-cite-element" title="Title of a work">cite</a> element: Title of a work */
fun Node.cite(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("cite", text, init)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-cite-element.html#the-cite-element" title="Title of a work">cite</a> element: Title of a work */
fun Node.cite(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = cite(text, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-code-element.html#the-code-element" title="Computer code">code</a> element: Computer code */
fun Node.code(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("code", text, init)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-code-element.html#the-code-element" title="Computer code">code</a> element: Computer code */
fun Node.code(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = code(text, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-col-element.html#the-col-element" title="Table column">col</a> element: Table column */
fun Node.col(span: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = element("col", init)
    if (span != null) answer.setAttribute("span", span)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-col-element.html#the-col-element" title="Table column">col</a> element: Table column */
fun Node.col(span: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = col(span, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-colgroup-element.html#the-colgroup-element" title="Group of columns in a table">colgroup</a> element: Group of columns in a table */
fun Node.colgroup(text: String? = null, span: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("colgroup", text, init)
    if (span != null) answer.setAttribute("span", span)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-colgroup-element.html#the-colgroup-element" title="Group of columns in a table">colgroup</a> element: Group of columns in a table */
fun Node.colgroup(text: String? = null, span: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = colgroup(text, span, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-command-element.html#the-command-element" title="Menu command">command</a> element: Menu command */
fun Node.command(typeName: String? = null, label: String? = null, icon: String? = null, disabled: String? = null, checked: String? = null, radiogroup: String? = null, command: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = element("command", init)
    if (typeName != null) answer.setAttribute("type", typeName)
    if (label != null) answer.setAttribute("label", label)
    if (icon != null) answer.setAttribute("icon", icon)
    if (disabled != null) answer.setAttribute("disabled", disabled)
    if (checked != null) answer.setAttribute("checked", checked)
    if (radiogroup != null) answer.setAttribute("radiogroup", radiogroup)
    if (command != null) answer.setAttribute("command", command)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-command-element.html#the-command-element" title="Menu command">command</a> element: Menu command */
fun Node.command(typeName: String? = null, label: String? = null, icon: String? = null, disabled: String? = null, checked: String? = null, radiogroup: String? = null, command: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = command(typeName, label, icon, disabled, checked, radiogroup, command, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-datalist-element.html#the-datalist-element" title="Container for options for combo box control">datalist</a> element: Container for options for <a href="common-input-element-attributes.html#attr-input-list" title="attr-input-list">combo box control</a> */
fun Node.datalist(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("datalist", text, init)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-datalist-element.html#the-datalist-element" title="Container for options for combo box control">datalist</a> element: Container for options for <a href="common-input-element-attributes.html#attr-input-list" title="attr-input-list">combo box control</a> */
fun Node.datalist(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = datalist(text, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-dd-element.html#the-dd-element" title="Content for corresponding dt element(s)">dd</a> element: Content for corresponding <code><a href="the-dt-element.html#the-dt-element">dt</a></code> element(s) */
fun Node.dd(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("dd", text, init)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-dd-element.html#the-dd-element" title="Content for corresponding dt element(s)">dd</a> element: Content for corresponding <code><a href="the-dt-element.html#the-dt-element">dt</a></code> element(s) */
fun Node.dd(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = dd(text, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-del-element.html#the-del-element" title="A removal from the document">del</a> element: A removal from the document */
fun Node.del(text: String? = null, cite: String? = null, datetime: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("del", text, init)
    if (cite != null) answer.setAttribute("cite", cite)
    if (datetime != null) answer.setAttribute("datetime", datetime)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-del-element.html#the-del-element" title="A removal from the document">del</a> element: A removal from the document */
fun Node.del(text: String? = null, cite: String? = null, datetime: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = del(text, cite, datetime, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-details-element.html#the-details-element" title="Disclosure control for hiding details">details</a> element: Disclosure control for hiding details */
fun Node.details(text: String? = null, open: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("details", text, init)
    if (open != null) answer.setAttribute("open", open)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-details-element.html#the-details-element" title="Disclosure control for hiding details">details</a> element: Disclosure control for hiding details */
fun Node.details(text: String? = null, open: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = details(text, open, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-dfn-element.html#the-dfn-element" title="Defining instance">dfn</a> element: Defining instance */
fun Node.dfn(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("dfn", text, init)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-dfn-element.html#the-dfn-element" title="Defining instance">dfn</a> element: Defining instance */
fun Node.dfn(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = dfn(text, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-div-element.html#the-div-element" title="Generic flow container">div</a> element: Generic flow container */
fun Node.div(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("div", text, init)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-div-element.html#the-div-element" title="Generic flow container">div</a> element: Generic flow container */
fun Node.div(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = div(text, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-dl-element.html#the-dl-element" title="Association list consisting of zero or more name-value groups">dl</a> element: Association list consisting of zero or more name-value groups */
fun Node.dl(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("dl", text, init)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-dl-element.html#the-dl-element" title="Association list consisting of zero or more name-value groups">dl</a> element: Association list consisting of zero or more name-value groups */
fun Node.dl(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = dl(text, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-dt-element.html#the-dt-element" title="Legend for corresponding dd element(s)">dt</a> element: Legend for corresponding <code><a href="the-dd-element.html#the-dd-element">dd</a></code> element(s) */
fun Node.dt(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("dt", text, init)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-dt-element.html#the-dt-element" title="Legend for corresponding dd element(s)">dt</a> element: Legend for corresponding <code><a href="the-dd-element.html#the-dd-element">dd</a></code> element(s) */
fun Node.dt(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = dt(text, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-em-element.html#the-em-element" title="Stress emphasis">em</a> element: Stress emphasis */
fun Node.em(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("em", text, init)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-em-element.html#the-em-element" title="Stress emphasis">em</a> element: Stress emphasis */
fun Node.em(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = em(text, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-embed-element.html#the-embed-element" title="Plugin">embed</a> element: <a href="infrastructure.html#plugin">Plugin</a> */
fun Node.embed(src: String? = null, typeName: String? = null, width: String? = null, height: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = element("embed", init)
    if (src != null) answer.setAttribute("src", src)
    if (typeName != null) answer.setAttribute("type", typeName)
    if (width != null) answer.setAttribute("width", width)
    if (height != null) answer.setAttribute("height", height)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-embed-element.html#the-embed-element" title="Plugin">embed</a> element: <a href="infrastructure.html#plugin">Plugin</a> */
fun Node.embed(src: String? = null, typeName: String? = null, width: String? = null, height: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = embed(src, typeName, width, height, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-fieldset-element.html#the-fieldset-element" title="Group of form controls">fieldset</a> element: Group of form controls */
fun Node.fieldset(text: String? = null, disabled: String? = null, form: String? = null, name: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("fieldset", text, init)
    if (disabled != null) answer.setAttribute("disabled", disabled)
    if (form != null) answer.setAttribute("form", form)
    if (name != null) answer.setAttribute("name", name)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-fieldset-element.html#the-fieldset-element" title="Group of form controls">fieldset</a> element: Group of form controls */
fun Node.fieldset(text: String? = null, disabled: String? = null, form: String? = null, name: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = fieldset(text, disabled, form, name, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-figcaption-element.html#the-figcaption-element" title="Caption for figure">figcaption</a> element: Caption for <code><a href="the-figure-element.html#the-figure-element">figure</a></code> */
fun Node.figcaption(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("figcaption", text, init)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-figcaption-element.html#the-figcaption-element" title="Caption for figure">figcaption</a> element: Caption for <code><a href="the-figure-element.html#the-figure-element">figure</a></code> */
fun Node.figcaption(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = figcaption(text, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-figure-element.html#the-figure-element" title="Figure with optional caption">figure</a> element: Figure with optional caption */
fun Node.figure(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("figure", text, init)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-figure-element.html#the-figure-element" title="Figure with optional caption">figure</a> element: Figure with optional caption */
fun Node.figure(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = figure(text, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-footer-element.html#the-footer-element" title="Footer for a page or section">footer</a> element: Footer for a page or section */
fun Node.footer(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("footer", text, init)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-footer-element.html#the-footer-element" title="Footer for a page or section">footer</a> element: Footer for a page or section */
fun Node.footer(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = footer(text, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-form-element.html#the-form-element" title="User-submittable form">form</a> element: User-submittable form */
fun Node.form(text: String? = null, acceptCharset: String? = null, action: String? = null, autocomplete: String? = null, enctype: String? = null, method: String? = null, name: String? = null, novalidate: String? = null, target: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("form", text, init)
    if (acceptCharset != null) answer.setAttribute("accept-charset", acceptCharset)
    if (action != null) answer.setAttribute("action", action)
    if (autocomplete != null) answer.setAttribute("autocomplete", autocomplete)
    if (enctype != null) answer.setAttribute("enctype", enctype)
    if (method != null) answer.setAttribute("method", method)
    if (name != null) answer.setAttribute("name", name)
    if (novalidate != null) answer.setAttribute("novalidate", novalidate)
    if (target != null) answer.setAttribute("target", target)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-form-element.html#the-form-element" title="User-submittable form">form</a> element: User-submittable form */
fun Node.form(text: String? = null, acceptCharset: String? = null, action: String? = null, autocomplete: String? = null, enctype: String? = null, method: String? = null, name: String? = null, novalidate: String? = null, target: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = form(text, acceptCharset, action, autocomplete, enctype, method, name, novalidate, target, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-h1-h2-h3-h4-h5-and-h6-elements.html#the-h1-h2-h3-h4-h5-and-h6-elements" title="Section heading">h1</a> element: Section heading */
fun Node.h1(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("h1", text, init)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-h1-h2-h3-h4-h5-and-h6-elements.html#the-h1-h2-h3-h4-h5-and-h6-elements" title="Section heading">h1</a> element: Section heading */
fun Node.h1(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = h1(text, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-head-element.html#the-head-element" title="Container for document metadata">head</a> element: Container for document metadata */
fun Node.head(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("head", text, init)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-head-element.html#the-head-element" title="Container for document metadata">head</a> element: Container for document metadata */
fun Node.head(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = head(text, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-header-element.html#the-header-element" title="Introductory or navigational aids for a page or section">header</a> element: Introductory or navigational aids for a page or section */
fun Node.header(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("header", text, init)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-header-element.html#the-header-element" title="Introductory or navigational aids for a page or section">header</a> element: Introductory or navigational aids for a page or section */
fun Node.header(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = header(text, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-hgroup-element.html#the-hgroup-element" title="heading group">hgroup</a> element: heading group */
fun Node.hgroup(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("hgroup", text, init)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-hgroup-element.html#the-hgroup-element" title="heading group">hgroup</a> element: heading group */
fun Node.hgroup(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = hgroup(text, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-hr-element.html#the-hr-element" title="Thematic break">hr</a> element: Thematic break */
fun Node.hr(accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = element("hr", init)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-hr-element.html#the-hr-element" title="Thematic break">hr</a> element: Thematic break */
fun Node.hr(accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = hr(accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-html-element.html#the-html-element" title="Root element">html</a> element: Root element */
fun Node.html(text: String? = null, manifest: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("html", text, init)
    if (manifest != null) answer.setAttribute("manifest", manifest)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-html-element.html#the-html-element" title="Root element">html</a> element: Root element */
fun Node.html(text: String? = null, manifest: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = html(text, manifest, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-i-element.html#the-i-element" title="Alternate voice">i</a> element: Alternate voice */
fun Node.i(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("i", text, init)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-i-element.html#the-i-element" title="Alternate voice">i</a> element: Alternate voice */
fun Node.i(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = i(text, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-iframe-element.html#the-iframe-element" title="Nested browsing context">iframe</a> element: <a href="browsers.html#nested-browsing-context">Nested browsing context</a> */
fun Node.iframe(text: String? = null, src: String? = null, srcdoc: String? = null, name: String? = null, sandbox: String? = null, seamless: String? = null, width: String? = null, height: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("iframe", text, init)
    if (src != null) answer.setAttribute("src", src)
    if (srcdoc != null) answer.setAttribute("srcdoc", srcdoc)
    if (name != null) answer.setAttribute("name", name)
    if (sandbox != null) answer.setAttribute("sandbox", sandbox)
    if (seamless != null) answer.setAttribute("seamless", seamless)
    if (width != null) answer.setAttribute("width", width)
    if (height != null) answer.setAttribute("height", height)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-iframe-element.html#the-iframe-element" title="Nested browsing context">iframe</a> element: <a href="browsers.html#nested-browsing-context">Nested browsing context</a> */
fun Node.iframe(text: String? = null, src: String? = null, srcdoc: String? = null, name: String? = null, sandbox: String? = null, seamless: String? = null, width: String? = null, height: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = iframe(text, src, srcdoc, name, sandbox, seamless, width, height, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-img-element.html#the-img-element" title="Image">img</a> element: Image */
fun Node.img(alt: String? = null, src: String? = null, crossorigin: String? = null, usemap: String? = null, ismap: String? = null, width: String? = null, height: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = element("img", init)
    if (alt != null) answer.setAttribute("alt", alt)
    if (src != null) answer.setAttribute("src", src)
    if (crossorigin != null) answer.setAttribute("crossorigin", crossorigin)
    if (usemap != null) answer.setAttribute("usemap", usemap)
    if (ismap != null) answer.setAttribute("ismap", ismap)
    if (width != null) answer.setAttribute("width", width)
    if (height != null) answer.setAttribute("height", height)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-img-element.html#the-img-element" title="Image">img</a> element: Image */
fun Node.img(alt: String? = null, src: String? = null, crossorigin: String? = null, usemap: String? = null, ismap: String? = null, width: String? = null, height: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = img(alt, src, crossorigin, usemap, ismap, width, height, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-input-element.html#the-input-element" title="Form control">input</a> element: Form control */
fun Node.input(accept: String? = null, alt: String? = null, autocomplete: String? = null, autofocus: String? = null, checked: String? = null, dirname: String? = null, disabled: String? = null, form: String? = null, formaction: String? = null, formenctype: String? = null, formmethod: String? = null, formnovalidate: String? = null, formtarget: String? = null, height: String? = null, list: String? = null, max: String? = null, maxlength: String? = null, min: String? = null, multiple: String? = null, name: String? = null, pattern: String? = null, placeholder: String? = null, readonly: String? = null, required: String? = null, size: String? = null, src: String? = null, step: String? = null, typeName: String? = null, value: String? = null, width: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = element("input", init)
    if (accept != null) answer.setAttribute("accept", accept)
    if (alt != null) answer.setAttribute("alt", alt)
    if (autocomplete != null) answer.setAttribute("autocomplete", autocomplete)
    if (autofocus != null) answer.setAttribute("autofocus", autofocus)
    if (checked != null) answer.setAttribute("checked", checked)
    if (dirname != null) answer.setAttribute("dirname", dirname)
    if (disabled != null) answer.setAttribute("disabled", disabled)
    if (form != null) answer.setAttribute("form", form)
    if (formaction != null) answer.setAttribute("formaction", formaction)
    if (formenctype != null) answer.setAttribute("formenctype", formenctype)
    if (formmethod != null) answer.setAttribute("formmethod", formmethod)
    if (formnovalidate != null) answer.setAttribute("formnovalidate", formnovalidate)
    if (formtarget != null) answer.setAttribute("formtarget", formtarget)
    if (height != null) answer.setAttribute("height", height)
    if (list != null) answer.setAttribute("list", list)
    if (max != null) answer.setAttribute("max", max)
    if (maxlength != null) answer.setAttribute("maxlength", maxlength)
    if (min != null) answer.setAttribute("min", min)
    if (multiple != null) answer.setAttribute("multiple", multiple)
    if (name != null) answer.setAttribute("name", name)
    if (pattern != null) answer.setAttribute("pattern", pattern)
    if (placeholder != null) answer.setAttribute("placeholder", placeholder)
    if (readonly != null) answer.setAttribute("readonly", readonly)
    if (required != null) answer.setAttribute("required", required)
    if (size != null) answer.setAttribute("size", size)
    if (src != null) answer.setAttribute("src", src)
    if (step != null) answer.setAttribute("step", step)
    if (typeName != null) answer.setAttribute("type", typeName)
    if (value != null) answer.setAttribute("value", value)
    if (width != null) answer.setAttribute("width", width)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-input-element.html#the-input-element" title="Form control">input</a> element: Form control */
fun Node.input(accept: String? = null, alt: String? = null, autocomplete: String? = null, autofocus: String? = null, checked: String? = null, dirname: String? = null, disabled: String? = null, form: String? = null, formaction: String? = null, formenctype: String? = null, formmethod: String? = null, formnovalidate: String? = null, formtarget: String? = null, height: String? = null, list: String? = null, max: String? = null, maxlength: String? = null, min: String? = null, multiple: String? = null, name: String? = null, pattern: String? = null, placeholder: String? = null, readonly: String? = null, required: String? = null, size: String? = null, src: String? = null, step: String? = null, typeName: String? = null, value: String? = null, width: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = input(accept, alt, autocomplete, autofocus, checked, dirname, disabled, form, formaction, formenctype, formmethod, formnovalidate, formtarget, height, list, max, maxlength, min, multiple, name, pattern, placeholder, readonly, required, size, src, step, typeName, value, width, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-ins-element.html#the-ins-element" title="An addition to the document">ins</a> element: An addition to the document */
fun Node.ins(text: String? = null, cite: String? = null, datetime: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("ins", text, init)
    if (cite != null) answer.setAttribute("cite", cite)
    if (datetime != null) answer.setAttribute("datetime", datetime)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-ins-element.html#the-ins-element" title="An addition to the document">ins</a> element: An addition to the document */
fun Node.ins(text: String? = null, cite: String? = null, datetime: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = ins(text, cite, datetime, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-kbd-element.html#the-kbd-element" title="User input">kbd</a> element: User input */
fun Node.kbd(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("kbd", text, init)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-kbd-element.html#the-kbd-element" title="User input">kbd</a> element: User input */
fun Node.kbd(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = kbd(text, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-keygen-element.html#the-keygen-element" title="Cryptographic key-pair generator form control">keygen</a> element: Cryptographic key-pair generator form control */
fun Node.keygen(autofocus: String? = null, challenge: String? = null, disabled: String? = null, form: String? = null, keytype: String? = null, name: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = element("keygen", init)
    if (autofocus != null) answer.setAttribute("autofocus", autofocus)
    if (challenge != null) answer.setAttribute("challenge", challenge)
    if (disabled != null) answer.setAttribute("disabled", disabled)
    if (form != null) answer.setAttribute("form", form)
    if (keytype != null) answer.setAttribute("keytype", keytype)
    if (name != null) answer.setAttribute("name", name)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-keygen-element.html#the-keygen-element" title="Cryptographic key-pair generator form control">keygen</a> element: Cryptographic key-pair generator form control */
fun Node.keygen(autofocus: String? = null, challenge: String? = null, disabled: String? = null, form: String? = null, keytype: String? = null, name: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = keygen(autofocus, challenge, disabled, form, keytype, name, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-label-element.html#the-label-element" title="Caption for a form control">label</a> element: Caption for a form control */
fun Node.label(text: String? = null, form: String? = null, forInput: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("label", text, init)
    if (form != null) answer.setAttribute("form", form)
    if (forInput != null) answer.setAttribute("for", forInput)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-label-element.html#the-label-element" title="Caption for a form control">label</a> element: Caption for a form control */
fun Node.label(text: String? = null, form: String? = null, forInput: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = label(text, form, forInput, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-legend-element.html#the-legend-element" title="Caption for fieldset">legend</a> element: Caption for <code><a href="the-fieldset-element.html#the-fieldset-element">fieldset</a></code> */
fun Node.legend(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("legend", text, init)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-legend-element.html#the-legend-element" title="Caption for fieldset">legend</a> element: Caption for <code><a href="the-fieldset-element.html#the-fieldset-element">fieldset</a></code> */
fun Node.legend(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = legend(text, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-li-element.html#the-li-element" title="List item">li</a> element: List item */
fun Node.li(text: String? = null, value: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("li", text, init)
    if (value != null) answer.setAttribute("value", value)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-li-element.html#the-li-element" title="List item">li</a> element: List item */
fun Node.li(text: String? = null, value: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = li(text, value, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-link-element.html#the-link-element" title="Link metadata">link</a> element: Link metadata */
fun Node.link(href: String? = null, rel: String? = null, media: String? = null, hreflang: String? = null, typeName: String? = null, sizes: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = element("link", init)
    if (href != null) answer.setAttribute("href", href)
    if (rel != null) answer.setAttribute("rel", rel)
    if (media != null) answer.setAttribute("media", media)
    if (hreflang != null) answer.setAttribute("hreflang", hreflang)
    if (typeName != null) answer.setAttribute("type", typeName)
    if (sizes != null) answer.setAttribute("sizes", sizes)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-link-element.html#the-link-element" title="Link metadata">link</a> element: Link metadata */
fun Node.link(href: String? = null, rel: String? = null, media: String? = null, hreflang: String? = null, typeName: String? = null, sizes: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = link(href, rel, media, hreflang, typeName, sizes, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-map-element.html#the-map-element" title="Image map">map</a> element: <a href="image-maps.html#image-map">Image map</a> */
fun Node.map(text: String? = null, name: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("map", text, init)
    if (name != null) answer.setAttribute("name", name)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-map-element.html#the-map-element" title="Image map">map</a> element: <a href="image-maps.html#image-map">Image map</a> */
fun Node.map(text: String? = null, name: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = map(text, name, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-mark-element.html#the-mark-element" title="Highlight">mark</a> element: Highlight */
fun Node.mark(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("mark", text, init)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-mark-element.html#the-mark-element" title="Highlight">mark</a> element: Highlight */
fun Node.mark(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = mark(text, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-menu-element.html#the-menu-element" title="Menu of commands">menu</a> element: Menu of commands */
fun Node.menu(text: String? = null, typeName: String? = null, label: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("menu", text, init)
    if (typeName != null) answer.setAttribute("type", typeName)
    if (label != null) answer.setAttribute("label", label)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-menu-element.html#the-menu-element" title="Menu of commands">menu</a> element: Menu of commands */
fun Node.menu(text: String? = null, typeName: String? = null, label: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = menu(text, typeName, label, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-meta-element.html#the-meta-element" title="Text metadata">meta</a> element: Text metadata */
fun Node.meta(name: String? = null, httpEquiv: String? = null, content: String? = null, charset: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = element("meta", init)
    if (name != null) answer.setAttribute("name", name)
    if (httpEquiv != null) answer.setAttribute("http-equiv", httpEquiv)
    if (content != null) answer.setAttribute("content", content)
    if (charset != null) answer.setAttribute("charset", charset)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-meta-element.html#the-meta-element" title="Text metadata">meta</a> element: Text metadata */
fun Node.meta(name: String? = null, httpEquiv: String? = null, content: String? = null, charset: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = meta(name, httpEquiv, content, charset, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-meter-element.html#the-meter-element" title="Gauge">meter</a> element: Gauge */
fun Node.meter(text: String? = null, value: String? = null, min: String? = null, max: String? = null, low: String? = null, high: String? = null, optimum: String? = null, form: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("meter", text, init)
    if (value != null) answer.setAttribute("value", value)
    if (min != null) answer.setAttribute("min", min)
    if (max != null) answer.setAttribute("max", max)
    if (low != null) answer.setAttribute("low", low)
    if (high != null) answer.setAttribute("high", high)
    if (optimum != null) answer.setAttribute("optimum", optimum)
    if (form != null) answer.setAttribute("form", form)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-meter-element.html#the-meter-element" title="Gauge">meter</a> element: Gauge */
fun Node.meter(text: String? = null, value: String? = null, min: String? = null, max: String? = null, low: String? = null, high: String? = null, optimum: String? = null, form: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = meter(text, value, min, max, low, high, optimum, form, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-nav-element.html#the-nav-element" title="Section with navigational links">nav</a> element: Section with navigational links */
fun Node.nav(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("nav", text, init)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-nav-element.html#the-nav-element" title="Section with navigational links">nav</a> element: Section with navigational links */
fun Node.nav(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = nav(text, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-noscript-element.html#the-noscript-element" title="Fallback content for script">noscript</a> element: Fallback content for script */
fun Node.noscript(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("noscript", text, init)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-noscript-element.html#the-noscript-element" title="Fallback content for script">noscript</a> element: Fallback content for script */
fun Node.noscript(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = noscript(text, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-object-element.html#the-object-element" title="Image, nested browsing context, or plugin">object</a> element: Image, <a href="browsers.html#nested-browsing-context">nested browsing context</a>, or <a href="infrastructure.html#plugin">plugin</a> */
fun Node.objectElement(text: String? = null, data: String? = null, typeName: String? = null, typemustmatch: String? = null, name: String? = null, usemap: String? = null, form: String? = null, width: String? = null, height: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("object", text, init)
    if (data != null) answer.setAttribute("data", data)
    if (typeName != null) answer.setAttribute("type", typeName)
    if (typemustmatch != null) answer.setAttribute("typemustmatch", typemustmatch)
    if (name != null) answer.setAttribute("name", name)
    if (usemap != null) answer.setAttribute("usemap", usemap)
    if (form != null) answer.setAttribute("form", form)
    if (width != null) answer.setAttribute("width", width)
    if (height != null) answer.setAttribute("height", height)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-object-element.html#the-object-element" title="Image, nested browsing context, or plugin">object</a> element: Image, <a href="browsers.html#nested-browsing-context">nested browsing context</a>, or <a href="infrastructure.html#plugin">plugin</a> */
fun Node.objectElement(text: String? = null, data: String? = null, typeName: String? = null, typemustmatch: String? = null, name: String? = null, usemap: String? = null, form: String? = null, width: String? = null, height: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = objectElement(text, data, typeName, typemustmatch, name, usemap, form, width, height, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-ol-element.html#the-ol-element" title="Ordered list">ol</a> element: Ordered list */
fun Node.ol(text: String? = null, reversed: String? = null, start: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("ol", text, init)
    if (reversed != null) answer.setAttribute("reversed", reversed)
    if (start != null) answer.setAttribute("start", start)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-ol-element.html#the-ol-element" title="Ordered list">ol</a> element: Ordered list */
fun Node.ol(text: String? = null, reversed: String? = null, start: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = ol(text, reversed, start, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-optgroup-element.html#the-optgroup-element" title="Group of options in a list box">optgroup</a> element: Group of options in a list box */
fun Node.optgroup(text: String? = null, disabled: String? = null, label: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("optgroup", text, init)
    if (disabled != null) answer.setAttribute("disabled", disabled)
    if (label != null) answer.setAttribute("label", label)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-optgroup-element.html#the-optgroup-element" title="Group of options in a list box">optgroup</a> element: Group of options in a list box */
fun Node.optgroup(text: String? = null, disabled: String? = null, label: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = optgroup(text, disabled, label, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-option-element.html#the-option-element" title="Option in a list box or combo box control">option</a> element: Option in a list box or combo box control */
fun Node.option(text: String? = null, disabled: String? = null, label: String? = null, selected: String? = null, value: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("option", text, init)
    if (disabled != null) answer.setAttribute("disabled", disabled)
    if (label != null) answer.setAttribute("label", label)
    if (selected != null) answer.setAttribute("selected", selected)
    if (value != null) answer.setAttribute("value", value)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-option-element.html#the-option-element" title="Option in a list box or combo box control">option</a> element: Option in a list box or combo box control */
fun Node.option(text: String? = null, disabled: String? = null, label: String? = null, selected: String? = null, value: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = option(text, disabled, label, selected, value, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-output-element.html#the-output-element" title="Calculated output value">output</a> element: Calculated output value */
fun Node.output(text: String? = null, forInput: String? = null, form: String? = null, name: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("output", text, init)
    if (forInput != null) answer.setAttribute("for", forInput)
    if (form != null) answer.setAttribute("form", form)
    if (name != null) answer.setAttribute("name", name)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-output-element.html#the-output-element" title="Calculated output value">output</a> element: Calculated output value */
fun Node.output(text: String? = null, forInput: String? = null, form: String? = null, name: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = output(text, forInput, form, name, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-p-element.html#the-p-element" title="Paragraph">p</a> element: Paragraph */
fun Node.p(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("p", text, init)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-p-element.html#the-p-element" title="Paragraph">p</a> element: Paragraph */
fun Node.p(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = p(text, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-param-element.html#the-param-element" title="Parameter for object">param</a> element: Parameter for <code><a href="the-object-element.html#the-object-element">object</a></code> */
fun Node.param(name: String? = null, value: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = element("param", init)
    if (name != null) answer.setAttribute("name", name)
    if (value != null) answer.setAttribute("value", value)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-param-element.html#the-param-element" title="Parameter for object">param</a> element: Parameter for <code><a href="the-object-element.html#the-object-element">object</a></code> */
fun Node.param(name: String? = null, value: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = param(name, value, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-pre-element.html#the-pre-element" title="Block of preformatted text">pre</a> element: Block of preformatted text */
fun Node.pre(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("pre", text, init)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-pre-element.html#the-pre-element" title="Block of preformatted text">pre</a> element: Block of preformatted text */
fun Node.pre(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = pre(text, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-progress-element.html#the-progress-element" title="Progress bar">progress</a> element: Progress bar */
fun Node.progress(text: String? = null, value: String? = null, max: String? = null, form: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("progress", text, init)
    if (value != null) answer.setAttribute("value", value)
    if (max != null) answer.setAttribute("max", max)
    if (form != null) answer.setAttribute("form", form)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-progress-element.html#the-progress-element" title="Progress bar">progress</a> element: Progress bar */
fun Node.progress(text: String? = null, value: String? = null, max: String? = null, form: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = progress(text, value, max, form, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-q-element.html#the-q-element" title="Quotation">q</a> element: Quotation */
fun Node.q(text: String? = null, cite: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("q", text, init)
    if (cite != null) answer.setAttribute("cite", cite)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-q-element.html#the-q-element" title="Quotation">q</a> element: Quotation */
fun Node.q(text: String? = null, cite: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = q(text, cite, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-rp-element.html#the-rp-element" title="Parenthesis for ruby annotation text">rp</a> element: Parenthesis for ruby annotation text */
fun Node.rp(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("rp", text, init)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-rp-element.html#the-rp-element" title="Parenthesis for ruby annotation text">rp</a> element: Parenthesis for ruby annotation text */
fun Node.rp(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = rp(text, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-rt-element.html#the-rt-element" title="Ruby annotation text">rt</a> element: Ruby annotation text */
fun Node.rt(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("rt", text, init)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-rt-element.html#the-rt-element" title="Ruby annotation text">rt</a> element: Ruby annotation text */
fun Node.rt(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = rt(text, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-ruby-element.html#the-ruby-element" title="Ruby annotation(s)">ruby</a> element: Ruby annotation(s) */
fun Node.ruby(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("ruby", text, init)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-ruby-element.html#the-ruby-element" title="Ruby annotation(s)">ruby</a> element: Ruby annotation(s) */
fun Node.ruby(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = ruby(text, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-s-element.html#the-s-element" title="Inaccurate text">s</a> element: Inaccurate text */
fun Node.s(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("s", text, init)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-s-element.html#the-s-element" title="Inaccurate text">s</a> element: Inaccurate text */
fun Node.s(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = s(text, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-samp-element.html#the-samp-element" title="Computer output">samp</a> element: Computer output */
fun Node.samp(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("samp", text, init)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-samp-element.html#the-samp-element" title="Computer output">samp</a> element: Computer output */
fun Node.samp(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = samp(text, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-script-element.html#the-script-element" title="Embedded script">script</a> element: Embedded script */
fun Node.script(text: String? = null, src: String? = null, async: String? = null, defer: String? = null, typeName: String? = null, charset: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("script", text, init)
    if (src != null) answer.setAttribute("src", src)
    if (async != null) answer.setAttribute("async", async)
    if (defer != null) answer.setAttribute("defer", defer)
    if (typeName != null) answer.setAttribute("type", typeName)
    if (charset != null) answer.setAttribute("charset", charset)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-script-element.html#the-script-element" title="Embedded script">script</a> element: Embedded script */
fun Node.script(text: String? = null, src: String? = null, async: String? = null, defer: String? = null, typeName: String? = null, charset: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = script(text, src, async, defer, typeName, charset, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-section-element.html#the-section-element" title="Generic document or application section">section</a> element: Generic document or application section */
fun Node.section(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("section", text, init)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-section-element.html#the-section-element" title="Generic document or application section">section</a> element: Generic document or application section */
fun Node.section(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = section(text, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-select-element.html#the-select-element" title="List box control">select</a> element: List box control */
fun Node.select(text: String? = null, autofocus: String? = null, disabled: String? = null, form: String? = null, multiple: String? = null, name: String? = null, required: String? = null, size: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("select", text, init)
    if (autofocus != null) answer.setAttribute("autofocus", autofocus)
    if (disabled != null) answer.setAttribute("disabled", disabled)
    if (form != null) answer.setAttribute("form", form)
    if (multiple != null) answer.setAttribute("multiple", multiple)
    if (name != null) answer.setAttribute("name", name)
    if (required != null) answer.setAttribute("required", required)
    if (size != null) answer.setAttribute("size", size)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-select-element.html#the-select-element" title="List box control">select</a> element: List box control */
fun Node.select(text: String? = null, autofocus: String? = null, disabled: String? = null, form: String? = null, multiple: String? = null, name: String? = null, required: String? = null, size: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = select(text, autofocus, disabled, form, multiple, name, required, size, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-small-element.html#the-small-element" title="Side comment">small</a> element: Side comment */
fun Node.small(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("small", text, init)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-small-element.html#the-small-element" title="Side comment">small</a> element: Side comment */
fun Node.small(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = small(text, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-source-element.html#the-source-element" title="Media source for video or audio">source</a> element: Media source for <code><a href="the-video-element.html#the-video-element">video</a></code> or <code><a href="the-audio-element.html#the-audio-element">audio</a></code> */
fun Node.source(src: String? = null, typeName: String? = null, media: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = element("source", init)
    if (src != null) answer.setAttribute("src", src)
    if (typeName != null) answer.setAttribute("type", typeName)
    if (media != null) answer.setAttribute("media", media)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-source-element.html#the-source-element" title="Media source for video or audio">source</a> element: Media source for <code><a href="the-video-element.html#the-video-element">video</a></code> or <code><a href="the-audio-element.html#the-audio-element">audio</a></code> */
fun Node.source(src: String? = null, typeName: String? = null, media: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = source(src, typeName, media, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-span-element.html#the-span-element" title="Generic phrasing container">span</a> element: Generic phrasing container */
fun Node.span(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("span", text, init)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-span-element.html#the-span-element" title="Generic phrasing container">span</a> element: Generic phrasing container */
fun Node.span(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = span(text, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-strong-element.html#the-strong-element" title="Importance">strong</a> element: Importance */
fun Node.strong(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("strong", text, init)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-strong-element.html#the-strong-element" title="Importance">strong</a> element: Importance */
fun Node.strong(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = strong(text, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-style-element.html#the-style-element" title="Embedded styling information">style</a> element: Embedded styling information */
fun Node.style(text: String? = null, media: String? = null, typeName: String? = null, scoped: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("style", text, init)
    if (media != null) answer.setAttribute("media", media)
    if (typeName != null) answer.setAttribute("type", typeName)
    if (scoped != null) answer.setAttribute("scoped", scoped)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-style-element.html#the-style-element" title="Embedded styling information">style</a> element: Embedded styling information */
fun Node.style(text: String? = null, media: String? = null, typeName: String? = null, scoped: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = style(text, media, typeName, scoped, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-sub-and-sup-elements.html#the-sub-and-sup-elements" title="Subscript">sub</a> element: Subscript */
fun Node.sub(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("sub", text, init)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-sub-and-sup-elements.html#the-sub-and-sup-elements" title="Subscript">sub</a> element: Subscript */
fun Node.sub(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = sub(text, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-summary-element.html#the-summary-element" title="Caption for details">summary</a> element: Caption for <code><a href="the-details-element.html#the-details-element">details</a></code> */
fun Node.summary(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("summary", text, init)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-summary-element.html#the-summary-element" title="Caption for details">summary</a> element: Caption for <code><a href="the-details-element.html#the-details-element">details</a></code> */
fun Node.summary(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = summary(text, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-sub-and-sup-elements.html#the-sub-and-sup-elements" title="Superscript">sup</a> element: Superscript */
fun Node.sup(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("sup", text, init)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-sub-and-sup-elements.html#the-sub-and-sup-elements" title="Superscript">sup</a> element: Superscript */
fun Node.sup(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = sup(text, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-table-element.html#the-table-element" title="Table">table</a> element: Table */
fun Node.table(text: String? = null, border: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("table", text, init)
    if (border != null) answer.setAttribute("border", border)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-table-element.html#the-table-element" title="Table">table</a> element: Table */
fun Node.table(text: String? = null, border: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = table(text, border, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-tbody-element.html#the-tbody-element" title="Group of rows in a table">tbody</a> element: Group of rows in a table */
fun Node.tbody(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("tbody", text, init)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-tbody-element.html#the-tbody-element" title="Group of rows in a table">tbody</a> element: Group of rows in a table */
fun Node.tbody(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = tbody(text, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-td-element.html#the-td-element" title="Table cell">td</a> element: Table cell */
fun Node.td(text: String? = null, colspan: String? = null, rowspan: String? = null, headers: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("td", text, init)
    if (colspan != null) answer.setAttribute("colspan", colspan)
    if (rowspan != null) answer.setAttribute("rowspan", rowspan)
    if (headers != null) answer.setAttribute("headers", headers)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-td-element.html#the-td-element" title="Table cell">td</a> element: Table cell */
fun Node.td(text: String? = null, colspan: String? = null, rowspan: String? = null, headers: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = td(text, colspan, rowspan, headers, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-textarea-element.html#the-textarea-element" title="Multiline text field">textarea</a> element: Multiline text field */
fun Node.textarea(text: String? = null, autofocus: String? = null, cols: String? = null, dirname: String? = null, disabled: String? = null, form: String? = null, maxlength: String? = null, name: String? = null, placeholder: String? = null, readonly: String? = null, required: String? = null, rows: String? = null, wrap: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("textarea", text, init)
    if (autofocus != null) answer.setAttribute("autofocus", autofocus)
    if (cols != null) answer.setAttribute("cols", cols)
    if (dirname != null) answer.setAttribute("dirname", dirname)
    if (disabled != null) answer.setAttribute("disabled", disabled)
    if (form != null) answer.setAttribute("form", form)
    if (maxlength != null) answer.setAttribute("maxlength", maxlength)
    if (name != null) answer.setAttribute("name", name)
    if (placeholder != null) answer.setAttribute("placeholder", placeholder)
    if (readonly != null) answer.setAttribute("readonly", readonly)
    if (required != null) answer.setAttribute("required", required)
    if (rows != null) answer.setAttribute("rows", rows)
    if (wrap != null) answer.setAttribute("wrap", wrap)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-textarea-element.html#the-textarea-element" title="Multiline text field">textarea</a> element: Multiline text field */
fun Node.textarea(text: String? = null, autofocus: String? = null, cols: String? = null, dirname: String? = null, disabled: String? = null, form: String? = null, maxlength: String? = null, name: String? = null, placeholder: String? = null, readonly: String? = null, required: String? = null, rows: String? = null, wrap: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = textarea(text, autofocus, cols, dirname, disabled, form, maxlength, name, placeholder, readonly, required, rows, wrap, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-tfoot-element.html#the-tfoot-element" title="Group of footer rows in a table">tfoot</a> element: Group of footer rows in a table */
fun Node.tfoot(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("tfoot", text, init)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-tfoot-element.html#the-tfoot-element" title="Group of footer rows in a table">tfoot</a> element: Group of footer rows in a table */
fun Node.tfoot(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = tfoot(text, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-th-element.html#the-th-element" title="Table header cell">th</a> element: Table header cell */
fun Node.th(text: String? = null, colspan: String? = null, rowspan: String? = null, headers: String? = null, scope: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("th", text, init)
    if (colspan != null) answer.setAttribute("colspan", colspan)
    if (rowspan != null) answer.setAttribute("rowspan", rowspan)
    if (headers != null) answer.setAttribute("headers", headers)
    if (scope != null) answer.setAttribute("scope", scope)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-th-element.html#the-th-element" title="Table header cell">th</a> element: Table header cell */
fun Node.th(text: String? = null, colspan: String? = null, rowspan: String? = null, headers: String? = null, scope: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = th(text, colspan, rowspan, headers, scope, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-thead-element.html#the-thead-element" title="Group of heading rows in a table">thead</a> element: Group of heading rows in a table */
fun Node.thead(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("thead", text, init)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-thead-element.html#the-thead-element" title="Group of heading rows in a table">thead</a> element: Group of heading rows in a table */
fun Node.thead(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = thead(text, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-time-element.html#the-time-element" title="Machine-readable equivalent of date- or time-related data">time</a> element: Machine-readable equivalent of date- or time-related data */
fun Node.time(text: String? = null, datetime: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("time", text, init)
    if (datetime != null) answer.setAttribute("datetime", datetime)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-time-element.html#the-time-element" title="Machine-readable equivalent of date- or time-related data">time</a> element: Machine-readable equivalent of date- or time-related data */
fun Node.time(text: String? = null, datetime: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = time(text, datetime, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-title-element.html#the-title-element" title="Document title">title</a> element: Document title */
fun Node.title(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("title", text, init)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-title-element.html#the-title-element" title="Document title">title</a> element: Document title */
fun Node.title(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = title(text, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-tr-element.html#the-tr-element" title="Table row">tr</a> element: Table row */
fun Node.tr(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("tr", text, init)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-tr-element.html#the-tr-element" title="Table row">tr</a> element: Table row */
fun Node.tr(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = tr(text, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-track-element.html#the-track-element" title="Timed text track">track</a> element: Timed text track */
fun Node.track(default: String? = null, kind: String? = null, label: String? = null, src: String? = null, srclang: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = element("track", init)
    if (default != null) answer.setAttribute("default", default)
    if (kind != null) answer.setAttribute("kind", kind)
    if (label != null) answer.setAttribute("label", label)
    if (src != null) answer.setAttribute("src", src)
    if (srclang != null) answer.setAttribute("srclang", srclang)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-track-element.html#the-track-element" title="Timed text track">track</a> element: Timed text track */
fun Node.track(default: String? = null, kind: String? = null, label: String? = null, src: String? = null, srclang: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = track(default, kind, label, src, srclang, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-u-element.html#the-u-element" title="Keywords">u</a> element: Keywords */
fun Node.u(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("u", text, init)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-u-element.html#the-u-element" title="Keywords">u</a> element: Keywords */
fun Node.u(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = u(text, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-ul-element.html#the-ul-element" title="List">ul</a> element: List */
fun Node.ul(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("ul", text, init)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-ul-element.html#the-ul-element" title="List">ul</a> element: List */
fun Node.ul(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = ul(text, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-var-element.html#the-var-element" title="Variable">var</a> element: Variable */
fun Node.varElement(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("var", text, init)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-var-element.html#the-var-element" title="Variable">var</a> element: Variable */
fun Node.varElement(text: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = varElement(text, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-video-element.html#the-video-element" title="Video player">video</a> element: Video player */
fun Node.video(text: String? = null, src: String? = null, crossorigin: String? = null, poster: String? = null, preload: String? = null, autoplay: String? = null, mediagroup: String? = null, loop: String? = null, muted: String? = null, controls: String? = null, width: String? = null, height: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = textElement("video", text, init)
    if (src != null) answer.setAttribute("src", src)
    if (crossorigin != null) answer.setAttribute("crossorigin", crossorigin)
    if (poster != null) answer.setAttribute("poster", poster)
    if (preload != null) answer.setAttribute("preload", preload)
    if (autoplay != null) answer.setAttribute("autoplay", autoplay)
    if (mediagroup != null) answer.setAttribute("mediagroup", mediagroup)
    if (loop != null) answer.setAttribute("loop", loop)
    if (muted != null) answer.setAttribute("muted", muted)
    if (controls != null) answer.setAttribute("controls", controls)
    if (width != null) answer.setAttribute("width", width)
    if (height != null) answer.setAttribute("height", height)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-video-element.html#the-video-element" title="Video player">video</a> element: Video player */
fun Node.video(text: String? = null, src: String? = null, crossorigin: String? = null, poster: String? = null, preload: String? = null, autoplay: String? = null, mediagroup: String? = null, loop: String? = null, muted: String? = null, controls: String? = null, width: String? = null, height: String? = null, accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = video(text, src, crossorigin, poster, preload, autoplay, mediagroup, loop, muted, controls, width, height, accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-wbr-element.html#the-wbr-element" title="Line breaking opportunity">wbr</a> element: Line breaking opportunity */
fun Node.wbr(accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null, init: Element.()-> Unit): Element {
    val answer = element("wbr", init)
    if (accesskey != null) answer.setAttribute("accesskey", accesskey)
    if (klass != null) answer.setAttribute("class", klass)
    if (contenteditable != null) answer.setAttribute("contenteditable", contenteditable)
    if (contextmenu != null) answer.setAttribute("contextmenu", contextmenu)
    if (dir != null) answer.setAttribute("dir", dir)
    if (draggable != null) answer.setAttribute("draggable", draggable)
    if (dropzone != null) answer.setAttribute("dropzone", dropzone)
    if (hidden != null) answer.setAttribute("hidden", hidden)
    if (id != null) answer.setAttribute("id", id)
    if (lang != null) answer.setAttribute("lang", lang)
    if (spellcheck != null) answer.setAttribute("spellcheck", spellcheck)
    if (style != null) answer.setAttribute("style", style)
    if (tabindex != null) answer.setAttribute("tabindex", tabindex)
    if (title != null) answer.setAttribute("title", title)
    if (translate != null) answer.setAttribute("translate", translate)
    return answer
}

/** Creates a new <a href="http://dev.w3.org/html5/spec/the-wbr-element.html#the-wbr-element" title="Line breaking opportunity">wbr</a> element: Line breaking opportunity */
fun Node.wbr(accesskey: String? = null, klass: String? = null, contenteditable: String? = null, contextmenu: String? = null, dir: String? = null, draggable: String? = null, dropzone: String? = null, hidden: String? = null, id: String? = null, lang: String? = null, spellcheck: String? = null, style: String? = null, tabindex: String? = null, title: String? = null, translate: String? = null): Element = wbr(accesskey, klass, contenteditable, contextmenu, dir, draggable, dropzone, hidden, id, lang, spellcheck, style, tabindex, title, translate) {}

